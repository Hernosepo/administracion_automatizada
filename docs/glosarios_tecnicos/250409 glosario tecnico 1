# üìö Glosario T√©cnico ‚Äì Proyecto Automatizaci√≥n Administrativa

## üß± Estructura y organizaci√≥n

- **Proyecto modular**: forma de organizar el c√≥digo en archivos separados (m√≥dulos) seg√∫n su funci√≥n.
- **Jerarqu√≠a de carpetas**: estructura en √°rbol donde cada carpeta puede contener subcarpetas.
- **Diccionario de estructura**: representaci√≥n de esa jerarqu√≠a usando `dict` en Python, con claves como nombres de carpetas y valores como subniveles.

## üìÅ Python ‚Äì M√≥dulos y herramientas usadas

- **`pathlib`**: m√≥dulo moderno para manejar rutas de archivos y carpetas. M√°s legible y orientado a objetos que `os`.
  - `Path(...)`: crea una ruta.
  - `/`: operador sobrecargado para unir rutas.
  - `.mkdir()`: crea carpetas.
  - `.touch()`: crea archivos vac√≠os.
  - `.write_text(...)`: escribe texto en archivos.
- **`shutil`** _(planificado)_: m√≥dulo para copiar archivos.
  - `shutil.copy()`: copia archivos de una ruta a otra.

## üß† Programaci√≥n general

- **Recursividad**: t√©cnica donde una funci√≥n se llama a s√≠ misma para recorrer estructuras jer√°rquicas como diccionarios anidados.
- **Funciones**: bloques de c√≥digo reutilizables. Cada funci√≥n tiene un prop√≥sito claro (`crear_nombre_proyecto`, `crear_estructura_carpetas`, etc).
- **Par√°metros por defecto**: como `base_dir="./"` en una funci√≥n, que permite usar un valor si no se pasa ninguno.
- **Importaci√≥n**: traer funciones de un archivo a otro con `from ... import ...`.

## üõ†Ô∏è Archivos y ejecuci√≥n

- **`main.py`**: archivo principal ejecutable del proyecto. Orquesta el uso de las funciones del m√≥dulo.
- **`generador.py`**: archivo que contiene funciones reutilizables.
- **`README.txt` (por carpeta)**: archivo generado dentro de cada carpeta como referencia o placeholder.
- **`README.md` (del proyecto)**: archivo explicativo principal, pensado para GitHub.
- **`.gitignore`**: archivo que indica a Git qu√© archivos no debe incluir (por ejemplo, carpetas temporales, archivos `.DS_Store` en Mac, etc).

## üß© Conceptos de automatizaci√≥n aplicada

- **MVP (Minimum Viable Product)**: versi√≥n m√≠nima funcional del sistema.
- **Plantillas base** (futuro): archivos `.xlsx`, `.docx`, etc. que se copiar√°n a las carpetas creadas para completarse autom√°ticamente.
- **Placeholder de datos**: campos como `<<CLIENTE>>` dentro de un documento que luego ser√°n reemplazados por datos reales.

## üí¨ Utilidades pr√°cticas

- **Visual feedback**: uso de `print()` para ver en consola el avance del proceso.
- **Hardcodeo**: valores escritos directamente en el c√≥digo (por ahora usamos `"250301SMS"`, `"SUBURBIA"`...), que m√°s adelante pueden volverse inputs o variables din√°micas.
- **Escalabilidad**: dise√±o del proyecto pensado para poder crecer en funcionalidades sin reescribir todo.
